/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package authentication;

import com.mysql.jdbc.Connection;
import javax.swing.JOptionPane;
import java.security.MessageDigest;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;

import java.nio.file.Files;
import javax.swing.ImageIcon;

import javax.swing.JLabel;
import java.awt.Image;

/**
 *
 * @author franz
 */
public class UpdateAccount extends javax.swing.JFrame {

    private String selectedPhotoPath;
    private File selectedFile;

    public UpdateAccount() {
        initComponents();
        displayUserInfo();
        if (selectedPhotoPath != null) {
            ImageIcon icon = new ImageIcon(selectedPhotoPath);
            regAccSubmit.setIcon(icon);
        }

//        displayPhoto = new JLabel();  // Initialize displayPhoto
        displayPhoto();  // Call the displayPhoto method
    }

    /**
     * Creates new form UpdateAccount
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        regAccName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        regAccEmail = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        regAccPass = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        regAccConPass = new javax.swing.JPasswordField();
        regAccSubmit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        displayPhoto = new javax.swing.JLabel();
        regAccSubmit2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 255));
        jLabel9.setText("Update Account");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 22, 241, -1));

        regAccName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regAccNameActionPerformed(evt);
            }
        });
        jPanel3.add(regAccName, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 122, 192, 31));

        jLabel3.setText("Full Name:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 129, -1, -1));
        jPanel3.add(regAccEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 165, 192, 28));

        jLabel5.setText("Email:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 171, -1, -1));

        jLabel6.setText("Old Password:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 211, -1, -1));

        regAccPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regAccPassActionPerformed(evt);
            }
        });
        jPanel3.add(regAccPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 205, 190, 28));

        jLabel7.setText("New Password:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, -1));

        regAccConPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regAccConPassActionPerformed(evt);
            }
        });
        jPanel3.add(regAccConPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 245, 190, 28));

        regAccSubmit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        regAccSubmit.setForeground(new java.awt.Color(0, 153, 255));
        regAccSubmit.setText("ADD PHOTO");
        regAccSubmit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        regAccSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regAccSubmitActionPerformed(evt);
            }
        });
        jPanel3.add(regAccSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 310, 120, 40));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Hello there !");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 60, 291, -1));

        jLabel1.setText("Enter fields to update account");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 82, 224, -1));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 14, 280, 280));

        regAccSubmit2.setBackground(new java.awt.Color(0, 102, 255));
        regAccSubmit2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        regAccSubmit2.setForeground(new java.awt.Color(255, 255, 255));
        regAccSubmit2.setText("UPDATE ACCOUNT");
        regAccSubmit2.setBorder(null);
        regAccSubmit2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regAccSubmit2ActionPerformed(evt);
            }
        });
        jPanel3.add(regAccSubmit2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 300, 220, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //METHODS  METHODS  METHODS  METHODS  METHODS  METHODS  METHODS  METHODS 
    //hashing
    public static String doHashing(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            byte[] resultByteArray = md.digest();

            StringBuilder sb = new StringBuilder();
            for (byte b : resultByteArray) {
                sb.append(String.format("%02x", b));
            }

            return sb.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    //showuserinfo in the textfield
    private void displayUserInfo() {
        try {
            Connection con = (Connection) connectionDB.getConnectionDB();
            String retrieveQuery = "SELECT Acc_Name, Acc_Email FROM Account WHERE Acc_id = ?";

            try (PreparedStatement pst = con.prepareStatement(retrieveQuery)) {
                pst.setString(1, Login.Accountid); // Assuming Accountid is the user's unique identifier

                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    String fullName = rs.getString("Acc_Name");
                    String email = rs.getString("Acc_Email");

                    regAccName.setText(fullName);
                    regAccEmail.setText(email);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

//update account info
    private boolean updateAccountInformation(String fullName, String email, String newPassword) {
        try (Connection con = connectionDB.getConnectionDB()) {
            String updateQuery = "UPDATE Account SET Acc_Name = ?, Acc_Email = ?, Acc_Password = ? WHERE Acc_id = ?";

            try (PreparedStatement pst = con.prepareStatement(updateQuery)) {
                pst.setString(1, fullName);
                pst.setString(2, email);
                pst.setString(3, doHashing(newPassword));
                pst.setString(4, Login.Accountid);

                int rowsAffected = pst.executeUpdate();

                return rowsAffected > 0;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

//save photo to database
    private void savePhotoToDatabase(File selectedFile) {
        try {
            Connection con = (Connection) connectionDB.getConnectionDB();
            String updateQuery = "UPDATE Account SET Acc_Photo = ? WHERE Acc_id = ?";

            try (PreparedStatement pst = con.prepareStatement(updateQuery)) {
                pst.setBytes(1, Files.readAllBytes(selectedFile.toPath()));
                pst.setString(2, Login.Accountid);

                int rowsAffected = pst.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Photo Saved Succesfully");
                    System.out.println("Photo saved to database successfully.");
                } else {
                    System.out.println("Failed to save photo to database.");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //display photo to jlabels
    private void displayPhoto() {
        try {
            // Assuming you have a valid Connection object
            Connection con = connectionDB.getConnectionDB();

            // Assuming you have the account ID stored in Login.Accountid
            String accountId = Login.Accountid;

            // Query to retrieve the photo from the database
            String selectQuery = "SELECT Acc_Photo FROM Account WHERE Acc_id = ?";
            try (PreparedStatement pst = con.prepareStatement(selectQuery)) {
                pst.setString(1, accountId);

                try (ResultSet rs = pst.executeQuery()) {
                    if (rs.next()) {
                        // Get the blob data
                        byte[] photoBytes = rs.getBytes("Acc_Photo");

                        // Convert the byte array to an Image
                        ImageIcon imageIcon = new ImageIcon(photoBytes);
                        Image image = imageIcon.getImage();

                        // Optionally, resize the image if needed
                        Image scaledImage = image.getScaledInstance(280, 280, Image.SCALE_DEFAULT);

                        // Set the Image to the JLabel
                        displayPhoto.setIcon(new ImageIcon(scaledImage));
                    } else {
//                        // No photo found for the specified account ID
                        displayPhoto.setIcon(null);  // Clear the label if no photo
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Handle the exception appropriately, e.g., show an error message
            JOptionPane.showMessageDialog(this, "Error loading photo: " + e.getMessage());

        }
    }


    private void regAccNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regAccNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regAccNameActionPerformed

    private void regAccPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regAccPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regAccPassActionPerformed

    private void regAccConPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regAccConPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regAccConPassActionPerformed

    //button to find files and save to database
    private void regAccSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regAccSubmitActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();

            if (selectedFile != null) {
                // Save the photo to the database
                savePhotoToDatabase(selectedFile);
                // Display the image on the JLabel
                displayPhoto();
            } else {
                System.out.println("No file selected.");
            }
        }
    }//GEN-LAST:event_regAccSubmitActionPerformed
//submit the final updated information
    private void regAccSubmit2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regAccSubmit2ActionPerformed
        // TODO add your handling code here:
        String fullName = regAccName.getText();
        String email = regAccEmail.getText();
        String oldPassword = new String(regAccPass.getPassword());
        String newPassword = new String(regAccConPass.getPassword());

        if (fullName.isEmpty() || email.isEmpty() || oldPassword.isEmpty() || newPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!verifyOldPassword(oldPassword)) {
            JOptionPane.showMessageDialog(this, "Incorrect old password.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (updateAccountInformation(fullName, email, newPassword)) {
            JOptionPane.showMessageDialog(this, "Account information updated successfully.");
            this.dispose();

        } else {
            JOptionPane.showMessageDialog(this, "Failed to update account information.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_regAccSubmit2ActionPerformed

//verify the old passwords
    private boolean verifyOldPassword(String oldPassword) {
        try (Connection con = connectionDB.getConnectionDB()) {
            String retrieveQuery = "SELECT Acc_Password FROM Account WHERE Acc_id = ?";

            try (PreparedStatement pst = con.prepareStatement(retrieveQuery)) {
                pst.setString(1, Login.Accountid); // Assuming Accountid is the user's unique identifier

                try (ResultSet rs = pst.executeQuery()) {
                    if (rs.next()) {
                        String storedHashedPassword = rs.getString("Acc_Password");
                        String hashedOldPassword = doHashing(oldPassword);

                        //System.out.println("Stored Hashed Password: " + storedHashedPassword);
                        //System.out.println("Hashed Old Password: " + hashedOldPassword);
                        boolean passwordMatch = storedHashedPassword.equals(hashedOldPassword);
                        //System.out.println("Password Match: " + passwordMatch);

                        return passwordMatch;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateAccount().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel displayPhoto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPasswordField regAccConPass;
    private javax.swing.JTextField regAccEmail;
    private javax.swing.JTextField regAccName;
    private javax.swing.JPasswordField regAccPass;
    private javax.swing.JButton regAccSubmit;
    private javax.swing.JButton regAccSubmit2;
    // End of variables declaration//GEN-END:variables
}
